import sqlite3

import aiogram
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import funcs
import settings

bot: aiogram.Bot

whitelist_menu_markup = aiogram.types.InlineKeyboardMarkup(row_width=2)
whitelist_menu_markup.add(
    aiogram.types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –ë–° ‚ûï', callback_data='wl_add'),
    aiogram.types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∏–∑ –ë–° üóëÔ∏è', callback_data='wl_remove')
)


class AnswersForm(StatesGroup):
    user_state_add = State()
    chat_state_add = State()
    user_state_remove = State()
    chat_state_remove = State()
    user_obj: aiogram.types.User | None = None


async def process_user_add(message: aiogram.types.Message, state: FSMContext):
    if message.forward_from is None and not message.text.isdigit():
        await message.reply('–≠—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå')
        return

    if message.text.isdigit():
        try:
            user = await funcs.get_user_from_id(bot, message.text)
        except aiogram.exceptions.ChatNotFound:
            await message.reply('–≠—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå')
            return
    else:
        user = message.forward_from

    if user.is_bot:
        await message.reply('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±–æ—Ç ü§ñ\n'
                            '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ ‚ùå')
        return  # the author of the forwarded message is a bot, and messages from bots are not counted in the checks

    await state.finish()
    await AnswersForm.chat_state_add.set()
    await message.reply(f'–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–π–¥–∏ —á–∞—Ç–∞ (-111222333444...) –ª–∏–±–æ –µ–≥–æ –æ—Ç–º–µ—Ç–∫—É (@chat) üì®\n\n'
                        ''
                        '–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel')

    AnswersForm.user_obj = user


async def process_user_remove(message: aiogram.types.Message, state: FSMContext):
    if message.forward_from is None and not message.text.isdigit():
        await message.reply('–≠—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå')
        return

    if message.text.isdigit():
        try:
            user = await funcs.get_user_from_id(bot, message.text)
        except aiogram.exceptions.ChatNotFound:
            await message.reply('–≠—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå')
            return
    else:
        user = message.forward_from

    if user.is_bot:
        await message.reply('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±–æ—Ç ü§ñ\n'
                            '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ ‚ùå')
        return  # the author of the forwarded message is a bot, and messages from bots are not counted in the checks

    await state.finish()
    await AnswersForm.chat_state_remove.set()
    await message.reply(f'–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–π–¥–∏ —á–∞—Ç–∞ (-111222333444...) –ª–∏–±–æ –µ–≥–æ –æ—Ç–º–µ—Ç–∫—É (@chat) üì®\n\n'
                        ''
                        '–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel')


async def process_chat_add(message: aiogram.types.Message, state: FSMContext):
    try:
        chat = await bot.get_chat(message.text)
    except aiogram.exceptions.ChatNotFound:
        try:
            chat = await bot.get_chat(f'@{message.text.split("/")[-1]}')
        except aiogram.exceptions.ChatNotFound:
            await message.reply('–≠—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–∞—Ç ‚ùå')
            return

    await state.finish()
    user = AnswersForm.user_obj
    AnswersForm.user_obj = None

    sql = sqlite3.connect(settings.SQL_DB_FL)
    req = sql.execute(f'SELECT * FROM whitelist WHERE member_id={user.id} AND chat_id={chat.id}').fetchone()

    if req is not None:
        await message.reply('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç! ‚úã')
        return

    sql.execute(f'INSERT INTO whitelist (member_id, chat_id) VALUES ({user.id}, {chat.id})')
    sql.commit()

    await message.reply(f'–û—Ç–ª–∏—á–Ω–æ! {funcs.get_str_user(user)} –∏–∑ —á–∞—Ç–∞ {funcs.get_str_chat(chat)} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ ‚úÖ', parse_mode='markdown')
    return


async def process_chat_remove(message: aiogram.types.Message, state: FSMContext):
    try:
        chat = await bot.get_chat(message.text)
    except aiogram.exceptions.ChatNotFound:
        try:
            chat = await bot.get_chat(f'@{message.text.split("/")[-1]}')
        except aiogram.exceptions.ChatNotFound:
            await message.reply('–≠—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–∞—Ç ‚ùå')
            return

    await state.finish()
    user = AnswersForm.user_obj
    AnswersForm.user_obj = None

    sql = sqlite3.connect(settings.SQL_DB_FL)
    req = sql.execute(f'SELECT * FROM whitelist WHERE member_id={user.id} AND chat_id={chat.id}').fetchone()

    if req is not None:
        await message.reply('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç! ‚úã')
        return

    sql.execute(f'DELETE FROM whitelist WHERE member_id={user.id} AND chat_id={chat.id}')
    sql.commit()

    await message.reply(f'–û—Ç–ª–∏—á–Ω–æ! {funcs.get_str_user(user)} –∏–∑ —á–∞—Ç–∞ {funcs.get_str_chat(chat)} –±—ã–ª —É–±—Ä–∞–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ ‚úÖ', parse_mode='markdown')
    return


async def whitelist_command(message: aiogram.types.Message):
    if message.chat.type != 'private':
        return

    await message.reply('–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤ –∫ –ª—é–±—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º (–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±–∞–Ω-–≤–æ—Ä–¥—ã, –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç –∏ –ø—Ä–æ—á–µ–µ) ‚ú≥Ô∏è',
                        reply_markup=whitelist_menu_markup)
